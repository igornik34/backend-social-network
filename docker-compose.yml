version: '3.8'

services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: nestjs_app
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/social_network?schema=public
      - JWT_SECRET=123456
      - JWT_ACCESS_TOKEN_TTL=2h
      - JWT_REFRESH_TOKEN_TTL=7d
      - COOKIE_DOMAIN=majinai.ru
      - FRONT_URL=https://majinai.ru:33334
      - NODE_ENV=development
      - REDIS_HOST=redis
      - REDIS_DB=0
      - REDIS_PORT=6379
    volumes:
      - ./uploads:/uploads
    depends_on:
      - postgres
    networks:
      - app-network

  directus:
    image: directus/directus:latest
    ports:
      - "8055:8055"
    environment:
      DB_CLIENT: postgres
      DB_HOST: postgres
      DB_PORT: 5432
      DB_DATABASE: social_network
      DB_USER: postgres
      DB_PASSWORD: postgres
      DB_CONNECTION_STRING: postgresql://postgres:postgres@postgres:5432/social_network?schema=public
      ADMIN_EMAIL: igor@igor.com
      ADMIN_PASSWORD: igor
      APP_ENV: development
    networks:
      - app-network
    volumes:
      - ./directus/uploads:/directus/uploads
    depends_on:
      - postgres
  postgres:
    image: postgres:16-alpine
    container_name: postgres_db
    restart: unless-stopped
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=social_network
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --save 60 1 --loglevel warning
    networks:
      - app-network
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 5s
      timeout: 3s
      retries: 5

  redisinsight:
    image: redislabs/redisinsight:1.14.0
    container_name: redisinsight
    restart: unless-stopped
    environment:
      - REDISINSIGHT_DISABLE_TLS=true
      - REDISINSIGHT_HOST=0.0.0.0  # Важно для работы в контейнере
      - REDISINSIGHT_PORT=8001
    ports:
      - "8001:8001"
    volumes:
      - redisinsight_data:/db
    networks:
      - app-network
    depends_on:
      - redis

  redis-exporter:
    image: oliver006/redis_exporter:latest
    container_name: redis_exporter
    restart: unless-stopped
    environment:
      - REDIS_ADDR=redis://redis:6379
    ports:
      - "9121:9121"
    networks:
      - app-network
    depends_on:
      - redis

  postgres_exporter:
    image: prometheuscommunity/postgres-exporter
    container_name: postgres_exporter
    restart: unless-stopped
    environment:
      - DATA_SOURCE_NAME=postgresql://postgres:postgres@postgres:5432/social_network?sslmode=disable
    ports:
      - "9187:9187"
    depends_on:
      - postgres
    networks:
      - app-network

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    depends_on:
      - app
    networks:
      - app-network

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
    environment:
      - GF_INSTALL_PLUGINS=redis-datasource
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    depends_on:
      - prometheus
      - redis
    networks:
      - app-network
  coturn:
    image: instrumentisto/coturn:latest
    container_name: coturn
    restart: unless-stopped
    ports:
      - "3478:3478/udp"
      - "3478:3478/tcp"
      - "49152-49200:49152-49200/udp"
    environment:
      - REALM=majinai.ru
      - USE_LOGFILE=true
      - USE_VERBOSE=true
      - USE_GLOGGING=true
      - USE_LONG_TERM_CREDENTIALS=TRUE
      - STATIC_USERS=testuser:testpass
      - LT_CREDENTIALS=false
      - NO_TLS=true
      - NO_DHCP=true
      - NO_RADIUS=true
      - VERBOSE=true
    networks:
      - app-network
  peerjs:
    image: node:18-alpine
    container_name: peerjs
    restart: unless-stopped
    ports:
      - "9000:9000"
    environment:
      - PEERJS_PORT=9000
      - PEERJS_KEY=peerjs
      - PEERJS_PATH=/peerjs
      - PEERJS_DEBUG=1
    volumes:
      - peerjs_data:/app
      - peerjs_npm_cache:/root/.npm  # Кэш npm для ускорения пересборки
    working_dir: /app
    command: >
      sh -c "npm install peer -g &&
      peerjs --port $${PEERJS_PORT} --key $${PEERJS_KEY} --path $${PEERJS_PATH} --expire_timeout 60000 --allow_discovery true --proxied true"
    networks:
      - app-network


volumes:
  postgres_data:
  prometheus_data:
  redis_data:
  grafana_data:
  redisinsight_data:
  peerjs_data:
  peerjs_npm_cache:

networks:
  app-network:
    driver: bridge