// schema.prisma

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["metrics"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String    @id @default(uuid())
  email            String    @unique
  password         String
  firstName        String?
  lastName         String?
  bio              String?
  avatar           String?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  posts            Post[]
  comments         Comment[]
  likes            Like[]
  followers        Follow[]  @relation("follower")
  following        Follow[]  @relation("following")
  messagesSent     Message[] @relation("sender")
  notificationsSent    Notification[] @relation("senderNotifications")
  notificationsReceived    Notification[] @relation("recipientNotifications")
  messagesReceived Message[] @relation("recipient")
  chats            Chat[]    @relation("ChatParticipants")
  Repost           Repost[]
  online           Boolean?
  lastseen         DateTime?
}

model Post {
  id        String    @id @default(uuid())
  content   String
  images    String[]
  author    User      @relation(fields: [authorId], references: [id])
  authorId  String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  comments  Comment[]
  likes     Like[]
  reposts   Repost[]
}

model Comment {
  id        String    @id @default(uuid())
  content   String
  author    User      @relation(fields: [authorId], references: [id])
  authorId  String
  post      Post      @relation(fields: [postId], references: [id])
  postId    String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  replies   Comment[] @relation("CommentToComment")
  parent    Comment?  @relation("CommentToComment", fields: [parentId], references: [id])
  likes     Like[]
  parentId  String?
  Repost    Repost[]
  editable  Boolean   @default(false)
}

model Like {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  post      Post?    @relation(fields: [postId], references: [id])
  postId    String?
  comment   Comment? @relation(fields: [commentId], references: [id])
  commentId String?
  createdAt DateTime @default(now())
}

model Repost {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  post      Post?    @relation(fields: [postId], references: [id])
  postId    String?
  comment   Comment? @relation(fields: [commentId], references: [id])
  commentId String?
  createdAt DateTime @default(now())
}

model Follow {
  id          String   @id @default(uuid())
  follower    User     @relation("follower", fields: [followerId], references: [id])
  followerId  String
  following   User     @relation("following", fields: [followingId], references: [id])
  followingId String
  createdAt   DateTime @default(now())

  @@unique([followerId, followingId])
}

model Message {
  id          String   @id @default(uuid())
  content     String
  sender      User     @relation("sender", fields: [senderId], references: [id])
  senderId    String
  recipient   User     @relation("recipient", fields: [recipientId], references: [id])
  recipientId String
  createdAt   DateTime @default(now())
  read        Boolean  @default(false)
  chat        Chat     @relation(fields: [chatId], references: [id])
  chatId      String
  reactions   String[]
  attachments String[]
  editable    Boolean   @default(false)
}

model Notification {
  id          String   @id @default(uuid())
  userId      String
  user        User     @relation("senderNotifications", fields: [userId], references: [id])
  recipientId String
  recipient   User     @relation("recipientNotifications", fields: [recipientId], references: [id])
  type        NotificationType
  read        Boolean  @default(false)
  createdAt   DateTime @default(now())
  metadata    Json?
}

enum NotificationType {
  NEW_FOLLOWER
  POST_LIKE
  COMMENT_LIKE
  NEW_COMMENT
  COMMENT_REPLY
  NEW_MESSAGE
  CHAT_INVITE
  SYSTEM
}

model Chat {
  id           String    @id @default(uuid())
  participants User[]    @relation("ChatParticipants")
  messages     Message[]
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}
